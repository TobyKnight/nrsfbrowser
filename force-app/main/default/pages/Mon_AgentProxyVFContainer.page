<apex:page lightningStyleSheets="true" standardStylesheets="false" showHeader="false" sidebar="false" docType="html-5.0" applyHtmlTag="false" applyBodyTag="false">
    <html>
        <head>
                <title>Monitoring Container</title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
                <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
                <meta http-equiv="Pragma" content="no-cache" />
                <meta http-equiv="Expires" content="0" />
               
                <!-- Start New Relic Monitoring -->
                <apex:includeScript value="{!$Resource[$CurrentPage.parameters.vfsnippet]}"/>
                <script src="/support/console/57.0/integration.js" type="text/javascript"></script>
                <script>
            //          const urlParams = new URLSearchParams(window.location.search);
            //        const vfHost = urlParams.get('vfhost');
            //        const vfPage = urlParams.get('vfpage');
            //        const vfSnippet = urlParams.get('vfsnippet');
            //       newrelic.setPageViewName(vfPage, vfHost);
            //        newrelic.interaction().ignore(); // ignore load of VF container page
                </script>
                <!-- End New Relic Monitoring -->
                    


        </head>
        <body>
            <apex:slds /> 
            <img id="isEnabled" src="/img/permissions_confirm16.gif	" alt="Snippet enabled"></img>
            Snippet: {!$CurrentPage.parameters.vfsnippet}
            <!-- Start New Relic Monitoring -->
            <script>
                
                var hostname = window.location.hostname;
                var lexOrigin = "https://" + hostname.split('--c.')[0] + ".lightning.force.com";
                var lexOriginSandbox = "https://" + hostname.split('--c.')[0] + ".sandbox.lightning.force.com";
                window.addEventListener("message", function(event) {
                    
                    if (event.origin !== lexOrigin && event.origin !== lexOriginSandbox)  {
                       
                        
                        return;
                    }
                    // Handle message
                    let e = event.data;
                  
                    
                    if (e.interactionGuid) {
                        
                        newrelic.setCurrentRouteName (e.interactionRouteStandardised); 
                        newrelic.interaction().setAttribute('sfdcCorrelationId', e.interactionCorrelationId);
                        newrelic.interaction().setAttribute('sfdcDurationBrowser', e.interactionDurationBrowser);
                        newrelic.interaction().setAttribute('sfdcDurationNetwork', e.interactionDurationNetwork);
                        newrelic.interaction().setAttribute('sfdcDurationServer', e.interactionDurationServer);
                        newrelic.interaction().setAttribute('sfdcDurationTotal', e.interactionDurationTotal);
                        newrelic.interaction().setAttribute('sfdcEndTime', e.interactionEndTime);
                        newrelic.interaction().setAttribute('sfdcGuid', e.interactionGuid);
                        newrelic.interaction().setAttribute('sfdcHost', e.interactionHost);
                        newrelic.interaction().setAttribute('sfdcLastNetworkResponseTime', e.interactionNetworkLatencyMs);
                        newrelic.interaction().setAttribute('sfdcLastRenderActivityTime', e.interactionEndTime);
                        newrelic.interaction().setAttribute('sfdcNetworkRoundTrips', e.interactionNetworkRoundTrips);
                        newrelic.interaction().setAttribute('sfdcRoute', e.interactionRouteStandardised);
                        newrelic.interaction().setAttribute('sfdcStartTime', e.interactionStartTime);
                        newrelic.interaction().setAttribute('sfdcUser', e.interactionUserId);
                        newrelic.interaction().setAttribute('sfdcFederationId', e.interactionFederationId);
                        newrelic.interaction().setAttribute('sfdcUserLocation', e.interactionUserLocation);
                        newrelic.interaction().setAttribute('sfdcAppName', e.interactionAppName);
                        newrelic.interaction().save();
                        newrelic.interaction().end();
                       
                    } else {
                      
                    }
                }, false);
            </script>
            <!-- End New Relic Monitoring -->
        </body>
    </html>
</apex:page>